<docs_index>
  <source>
    <title>Cloud hosting – Shiny for Python</title>
    <description>Cloud deployment options for Shiny Python apps including Posit Connect Cloud, shinyapps.io with rsconnect-python, and Hugging Face Spaces integration.</description>
    <source_url>https://shiny.posit.co/py/get-started/deploy-cloud.html</source_url>
    <local_file>cloud-hosting-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Overview – Shiny for Python</title>
    <description>Introduction to Shiny Python framework covering reactive inputs/outputs, UI components, layouts, transparent reactivity, integration with plotting libraries, templates, and extensibility via HTML/CSS/JavaScript.</description>
    <source_url>https://shiny.posit.co/py/docs/overview.html</source_url>
    <local_file>overview-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>User interfaces – Shiny for Python</title>
    <description>Dashboard UI components and layouts including cards, value boxes, sidebar layouts, multi-column grids, fillable pages, tooltips, popovers, and full-screen capabilities.</description>
    <source_url>https://shiny.posit.co/py/docs/user-interfaces.html</source_url>
    <local_file>user-interfaces-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Get inspired – Shiny for Python</title>
    <description>Generative AI application examples including chatbots, coding assistants, SQL query generators, enhanced dashboards with natural language interfaces, guided exploration tools, and streaming markdown components.</description>
    <source_url>https://shiny.posit.co/py/docs/genai-inspiration.html</source_url>
    <local_file>get-inspired-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Chatbots – Shiny for Python</title>
    <description>Building LLM-powered chatbots with ui.Chat and chatlas including streaming responses, bookmarking, message history, input suggestions, theming, custom icons, and interactive messages.</description>
    <source_url>https://shiny.posit.co/py/docs/genai-chatbots.html</source_url>
    <local_file>chatbots-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Streaming – Shiny for Python</title>
    <description>MarkdownStream component for streaming LLM-generated content with chatlas integration, content generators, interactive elements, non-blocking tasks, card layouts, error handling, and cancellation capabilities.</description>
    <source_url>https://shiny.posit.co/py/docs/genai-stream.html</source_url>
    <local_file>streaming-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Tool calling – Shiny for Python</title>
    <description>LLM tool calling with chatlas to extend chatbot capabilities including registering functions, updating inputs, managing reactive state, SQL queries, custom displays, and interactive widget results.</description>
    <source_url>https://shiny.posit.co/py/docs/genai-tools.html</source_url>
    <local_file>tool-calling-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Structured data – Shiny for Python</title>
    <description>Extracting structured data from unstructured text and images using chatlas extract_data method with Pydantic models, editable tables, input population, form processing, and invoice extraction examples.</description>
    <source_url>https://shiny.posit.co/py/docs/genai-structured-data.html</source_url>
    <local_file>structured-data-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>RAG – Shiny for Python</title>
    <description>Retrieval-Augmented Generation implementation with chatlas using embedding models, cosine similarity, document retrieval, vector databases like DuckDB, and context injection for LLM responses.</description>
    <source_url>https://shiny.posit.co/py/docs/genai-rag.html</source_url>
    <local_file>rag-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Jupyter Widgets – Shiny for Python</title>
    <description>Integrating ipywidgets with shinywidgets package including rendering Altair, Bokeh, Plotly, Pydeck widgets, reactive traits for efficient updates and user input, widget event callbacks, layout customisation, and shinylive support.</description>
    <source_url>https://shiny.posit.co/py/docs/jupyter-widgets.html</source_url>
    <local_file>jupyter-widgets-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Dynamic UI – Shiny for Python</title>
    <description>Programmatically updating UI with conditional panels using JavaScript conditions, updating input choices/values from server, and @render.ui for server-side dynamic UI generation.</description>
    <source_url>https://shiny.posit.co/py/docs/ui-dynamic.html</source_url>
    <local_file>dynamic-ui-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>UI as HTML – Shiny for Python</title>
    <description>Creating HTML with ui.markdown, ui.HTML, Tag objects, HTML tag methods for attributes/styles, head_content for meta tags, HTMLDependency for loading frameworks, TagList collections, and _repr_html_ integration.</description>
    <source_url>https://shiny.posit.co/py/docs/ui-html.html</source_url>
    <local_file>ui-as-html-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Customizing UI – Shiny for Python</title>
    <description>Customising app appearance with shinyswatch themes, custom CSS strings/files, inline styles, Bootstrap utility classes, CSS variables, font imports, static asset serving, and HTMLDependency for distributing themes.</description>
    <source_url>https://shiny.posit.co/py/docs/ui-customize.html</source_url>
    <local_file>customizing-ui-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Foundations – Shiny for Python</title>
    <description>Reactive programming foundations including @reactive.calc for shared calculations, @reactive.effect for side effects, reactive.value for maintaining state, reactive dependencies, invalidation patterns, and preventing infinite loops.</description>
    <source_url>https://shiny.posit.co/py/docs/reactive-foundations.html</source_url>
    <local_file>foundations-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Patterns – Shiny for Python</title>
    <description>Advanced reactive patterns including @reactive.event and isolate for event-driven execution, req for conditional execution, invalidate_later for scheduled updates, @reactive.file_reader for monitoring files, and @reactive.poll for conditional polling.</description>
    <source_url>https://shiny.posit.co/py/docs/reactive-patterns.html</source_url>
    <local_file>patterns-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Mutable objects – Shiny for Python</title>
    <description>Handling mutability in reactive contexts with copy-on-assignment, copy-on-update patterns, list comprehensions, slicing, star operators, immutable objects like tuples, pyrsistent package, preventing reactive invalidation failures and leaky changes.</description>
    <source_url>https://shiny.posit.co/py/docs/reactive-mutable.html</source_url>
    <local_file>mutable-objects-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Express vs. Core – Shiny for Python</title>
    <description>Comparing Shiny Express and Core syntax including import differences, UI/server organisation patterns, implicit/explicit output placement, container context managers versus nested functions, and transition guidance.</description>
    <source_url>https://shiny.posit.co/py/docs/express-vs-core.html</source_url>
    <local_file>express-vs-core-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Choosing a syntax – Shiny for Python</title>
    <description>Guidelines for choosing between Express and Core syntaxes covering maintainability, feature sets including modules and dynamic UI, maturity considerations, and familiarity for R users with comparative dashboard examples.</description>
    <source_url>https://shiny.posit.co/py/docs/express-or-core.html</source_url>
    <local_file>choosing-a-syntax-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Express in depth – Shiny for Python</title>
    <description>Advanced Shiny Express concepts including interactive mode execution, @expressify decorator for UI functions, ui.hold() for collecting UI, @render.express for reactive UI, shared objects across sessions, and session management.</description>
    <source_url>https://shiny.posit.co/py/docs/express-in-depth.html</source_url>
    <local_file>express-in-depth-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Transition to Core – Shiny for Python</title>
    <description>Step-by-step translation guide from Express to Core syntax covering imports, App object creation, UI/server separation, render function placement, output containers, and layout context manager conversion.</description>
    <source_url>https://shiny.posit.co/py/docs/express-to-core.html</source_url>
    <local_file>transition-to-core-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Shiny Modules – Shiny for Python</title>
    <description>Organising large Shiny apps with modules for code reusability and namespace isolation, covering @module decorator for Express, @module.ui/@module.server for Core, unique ID requirements, and composable building blocks.</description>
    <source_url>https://shiny.posit.co/py/docs/modules.html</source_url>
    <local_file>shiny-modules-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Unit testing – Shiny for Python</title>
    <description>Unit testing Shiny apps with pytest by separating business logic from reactive code, creating testable functions, writing assertions for functionality, and interpreting test results.</description>
    <source_url>https://shiny.posit.co/py/docs/unit-testing.html</source_url>
    <local_file>unit-testing-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Module Communication – Shiny for Python</title>
    <description>Passing data between modules using non-reactive arguments, reactive arguments, callbacks, returning reactive objects, multiple UI elements via *args, and tuple/namedtuple returns for multiple values.</description>
    <source_url>https://shiny.posit.co/py/docs/module-communication.html</source_url>
    <local_file>module-communication-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>End-to-End Testing Your App – Shiny for Python</title>
    <description>Testing Shiny apps with Playwright and pytest using controllers for interactions, fixtures for app lifecycle, shiny add test command for generating tests, and troubleshooting strategies.</description>
    <source_url>https://shiny.posit.co/py/docs/end-to-end-testing.html</source_url>
    <local_file>end-to-end-testing-your-app-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Non-blocking operations – Shiny for Python</title>
    <description>Achieving responsive apps with @reactive.extended_task decorator for concurrent async operations, ThreadPoolExecutor/ProcessPoolExecutor for CPU-bound tasks, task invocation patterns, result retrieval, and cancellation methods.</description>
    <source_url>https://shiny.posit.co/py/docs/nonblocking.html</source_url>
    <local_file>non-blocking-operations-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Routing – Shiny for Python</title>
    <description>Adding custom routes to Shiny apps using Starlette framework, mounting multiple applications including static files, and combining Shiny with other Starlette applications.</description>
    <source_url>https://shiny.posit.co/py/docs/routing.html</source_url>
    <local_file>routing-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Shiny Components – Shiny for Python</title>
    <description>Component reference covering input widgets (buttons, sliders, selects, dates, files), output displays (plots, tables, grids, images, maps), and user feedback (chat, modals, notifications, progress bars, tooltips).</description>
    <source_url>https://shiny.posit.co/py/components/</source_url>
    <local_file>shiny-components-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Shiny Layouts – Shiny for Python</title>
    <description>Overview of layout options including navbars for navigation, sidebars for inputs/outputs, tabs and accordions, panels and cards for content areas, and grid/column arrangements for responsive layouts.</description>
    <source_url>https://shiny.posit.co/py/layouts/</source_url>
    <local_file>shiny-layouts-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Shiny for Python – Shiny Templates</title>
    <description>Collection of starter templates including basic apps, generative AI chatbots, dashboards with sidebars and value boxes, streaming updates with reactive file reading, and data entry forms.</description>
    <source_url>https://shiny.posit.co/py/templates/</source_url>
    <local_file>shiny-for-python-shiny-templates.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Welcome – Shiny for Python</title>
    <description>Introduction to Shiny for Python emphasising pure Python development, reactive framework, AI integration capabilities, extensibility, deployment options, open source community, templates and gallery examples.</description>
    <source_url>https://shiny.posit.co/py/get-started/</source_url>
    <local_file>welcome-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>What is Shiny? – Shiny for Python</title>
    <description>Explains Shiny's core features including batteries-included components, automatic reactivity system for efficient updates, starter templates via shiny create, HTML-based extensibility with web standards and custom component development.</description>
    <source_url>https://shiny.posit.co/py/get-started/what-is-shiny.html</source_url>
    <local_file>what-is-shiny-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Installation – Shiny for Python</title>
    <description>Installation instructions via pip, conda, and uv with virtual environment setup, development versions, IDE configuration for Positron and VS Code including Pyright type checking settings.</description>
    <source_url>https://shiny.posit.co/py/get-started/install.html</source_url>
    <local_file>installation-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Create and Run – Shiny for Python</title>
    <description>Using shiny CLI with create command for scaffolding apps from templates, running apps via Positron/VS Code Shiny extension or shiny run with reload and launch-browser flags, debugging with breakpoints.</description>
    <source_url>https://shiny.posit.co/py/get-started/create-run.html</source_url>
    <local_file>create-and-run-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>Debug, troubleshoot, &amp; help – Shiny for Python</title>
    <description>Debugging techniques including Positron/VS Code breakpoints, debug mode with app_opts, manual breakpoint() calls, print statements, handling missing outputs and SilentException, error sanitisation, community support resources.</description>
    <source_url>https://shiny.posit.co/py/get-started/debug.html</source_url>
    <local_file>debug-troubleshoot-help-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>index – Shiny for Python</title>
    <description>Complete Shiny Express API reference covering input/output components, layouts, navigation, chat interfaces, reactive programming, modules, dynamic UI, session management, theming, and application-level settings.</description>
    <source_url>https://shiny.posit.co/py/api/express/</source_url>
    <local_file>index-shiny-for-python.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
  <source>
    <title>index – Shiny for Python</title>
    <description>Playwright-based testing API with controllers for UI components, inputs, outputs, navigation, chat interfaces, file operations, expect assertions, pytest fixtures, and ShinyAppProc for running test apps.</description>
    <source_url>https://shiny.posit.co/py/api/testing/</source_url>
    <local_file>index-shiny-for-python-2.md</local_file>
    <scraped_at>2025-10-16</scraped_at>
  </source>
</docs_index>